<?php
/**
 * This file is part of prooph/proophessor-do.
 * (c) 2014-2018 prooph software GmbH <contact@prooph.de>
 * (c) 2015-2018 Sascha-Oliver Prolic <saschaprolic@googlemail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Prooph\ProophessorDo;

use Prooph\EventStore;

/**
 * Local configuration overrides - make your adjustments here
 */
return [
    // dependencies settings
    'dependencies' => [
        'factories' => [
            EventStore\EventStore::class => [
                EventStore\Pdo\Container\PostgresEventStoreFactory::class,
                'default',
            ],
            EventStore\Projection\ProjectionManager::class => [
                EventStore\Pdo\Container\PostgresProjectionManagerFactory::class,
                'default',
            ],
        ],
    ],
    // prooph settings
    'prooph' => [
        'event_store' => [
            'default' => [
                'persistence_strategy' => EventStore\Pdo\PersistenceStrategy\PostgresSingleStreamStrategy::class,
                'connection' => 'pdo.connection',
            ]
        ],
        'pdo_connection' => [
            'default' => [
                'schema' => 'pgsql',
                'user' => 'postgres',
                'password' => '',
                'host' => '127.0.0.1',
                'dbname' => 'todo',
                'port' => 5432,
            ],
        ],
        'projection_manager' => [
            'default' => [
                'connection' => 'pdo.connection',
            ],
        ],
        'service_bus' => [
            'command_bus' => [
                'plugins' => [
                    \Prooph\EventStoreBusBridge\TransactionManager::class,
                ],
            ],
        ],
    ],
];
